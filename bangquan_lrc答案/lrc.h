#ifndef _LRC_H_
#define _LRC_H_
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "console.h"
#define LRC_SIZE 256
//链表的每一个节点的类型
typedef struct lrc_node
{
	int times;
	char lrc[LRC_SIZE];
	struct lrc_node*prev;
	struct lrc_node*next;
}NODE;

//struct linklist结构体用来维护链表
typedef struct linklist
{
	NODE *head;
	NODE *tail;
	int size;
}LLIST;

typedef struct mytime
{
	int minute;
	int second;
	
}MYTIME;

/**************************************************************************
*	函数功能:初始化双向链表
*	参数：
*		list  LLIST结构体指针的地址
*	
* 	返回值:无
**************************************************************************/
void init_linklist(LLIST** list);

/**************************************************************************
*	函数功能:链表排序
*	参数：
*		list  LLIST结构体指针
*	
* 	返回值:无
**************************************************************************/
void sort_linklist( LLIST*list);

/**************************************************************************
*	函数功能:通过时间遍历链表,查找和时间t相同的节点
*	参数：
*		list  LLIST结构体指针的地址
		t     和节点比较的时间 单位s
*	
* 	返回值: 查找到与时间t相等的节点
**************************************************************************/
NODE *search_lrc_by_time(LLIST*list,int t);

/**************************************************************************
*	函数功能:显示歌词前4行 歌名  歌唱....
*	参数：
*		lrc_header  二维数据首行地址
*	
* 	返回值:无
**************************************************************************/

void show_lrc_header(char (*lrc_header)[LRC_SIZE]);

/**************************************************************************
*	函数功能:显示歌词
*	参数：
*		pcur  当前需要显示的节点
		list    LLIST结构体指针的地址
*	
* 	返回值:无
**************************************************************************/
void show_lrc( NODE *pcur,LLIST*list);


/**************************************************************************
*	函数功能:解析歌词 
*	参数：
*		lrc_header  二维数据首行地址
*		list    LLIST结构体指针的地址
*		songpath 歌词文件的路径
*	
* 	返回值:无
**************************************************************************/
void analysis_lrc(char (*lrc_header)[LRC_SIZE],LLIST*list,char *songpath);



/**************************************************************************
*	函数功能:遍历链表
*	参数：
*		list    LLIST结构体指针的地址
*	
* 	返回值:无
**************************************************************************/
void print_linklist_head(LLIST* list);


/**************************************************************************
*	函数功能:解析歌词,将歌词保存在二维数据 和链表中
*	参数：
*		tmp  二维数据首行地址
*		lrc    当前解析的一句中的歌词地址
*		count  当前解析的一句中的时间个数
*		list    LLIST结构体指针的地址
*	
* 	返回值:无
**************************************************************************/
void deposit_link(char (*tmp)[LRC_SIZE],char *lrc,int count,LLIST*list);



/**************************************************************************
*	函数功能:把新的节点插入到链表
*	参数：
*		list    LLIST结构体指针的地址
*		pnew    新的节点的地址
* 	返回值:无
**************************************************************************/
void insert_linklist_header(LLIST*list,NODE *pnew);

/**************************************************************************
*	函数功能:销毁链表
*	参数：
*		list    LLIST结构体指针的地址
* 	返回值:无
**************************************************************************/
void destroy_linklist(LLIST* list);
#endif
